{
	"info": {
		"_postman_id": "ae2f7eba-10c0-4792-9418-1c03cc71c0b2",
		"name": "group_28",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "/",
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{url}}/",
					"host": [
						"{{url}}"
					],
					"path": [
						""
					]
				}
			},
			"response": []
		},
		{
			"name": "/get_method",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Your test name\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData[1]).to.eql('28');",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{url}}/get_method?name=Andrey&age=28",
					"host": [
						"{{url}}"
					],
					"path": [
						"get_method"
					],
					"query": [
						{
							"key": "name",
							"value": "Andrey"
						},
						{
							"key": "age",
							"value": "28"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "user_info_2",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Статус код 200",
							"pm.test('Статус код 200', function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"// Спарсить response body в json",
							"let schema = {",
							"    \"$schema\": \"http://json-schema.org/draft-06/schema#\",",
							"    \"$ref\": \"#/definitions/Welcome3\",",
							"    \"definitions\": {",
							"        \"Welcome3\": {",
							"            \"type\": \"object\",",
							"            \"additionalProperties\": false,",
							"            \"properties\": {",
							"                \"person\": {",
							"                    \"$ref\": \"#/definitions/Person\"",
							"                },",
							"                \"qa_salary_after_1.5_year\": {",
							"                    \"type\": \"number\"",
							"                },",
							"                \"qa_salary_after_12_months\": {",
							"                    \"type\": \"number\"",
							"                },",
							"                \"qa_salary_after_3.5_years\": {",
							"                    \"type\": \"number\"",
							"                },",
							"                \"qa_salary_after_6_months\": {",
							"                    \"type\": \"integer\"",
							"                },",
							"                \"start_qa_salary\": {",
							"                    \"type\": \"integer\"",
							"                }",
							"            },",
							"            \"required\": [",
							"                \"person\",",
							"                \"qa_salary_after_1.5_year\",",
							"                \"qa_salary_after_12_months\",",
							"                \"qa_salary_after_3.5_years\",",
							"                \"qa_salary_after_6_months\",",
							"                \"start_qa_salary\"",
							"            ],",
							"            \"title\": \"Welcome3\"",
							"        },",
							"        \"Person\": {",
							"            \"type\": \"object\",",
							"            \"additionalProperties\": false,",
							"            \"properties\": {",
							"                \"u_age\": {",
							"                    \"type\": \"integer\"",
							"                },",
							"                \"u_name\": {",
							"                    \"type\": \"array\",",
							"                    \"items\": {",
							"                        \"$ref\": \"#/definitions/UName\"",
							"                    }",
							"                },",
							"                \"u_salary_5_years\": {",
							"                    \"type\": \"number\"",
							"                }",
							"            },",
							"            \"required\": [",
							"                \"u_age\",",
							"                \"u_name\",",
							"                \"u_salary_5_years\"",
							"            ],",
							"            \"title\": \"Person\"",
							"        },",
							"        \"UName\": {",
							"            \"anyOf\": [",
							"                {",
							"                    \"type\": \"integer\"",
							"                },",
							"                {",
							"                    \"type\": \"string\"",
							"                }",
							"            ],",
							"            \"title\": \"UName\"",
							"        }",
							"    }",
							"}",
							"let resp_json = pm.response.json()",
							"pm.test('Спарсить response body в json', function () {",
							"    pm.expect(tv4.validate(resp_json, schema)).to.be.true;",
							"});",
							"",
							"// Спарсить request",
							"let req = request.data",
							"",
							"// Проверить, что json response имеет параметр start_qa_salary",
							"pm.test('Проверить, что json response имеет параметр start_qa_salary', function () {",
							"    pm.expect(resp_json).to.have.property('start_qa_salary')",
							"});",
							"",
							"// Проверить, что json response имеет параметр qa_salary_after_6_months",
							"pm.test('Проверить, что json response имеет параметр qa_salary_after_6_months', function () {",
							"    pm.expect(resp_json).to.have.property('qa_salary_after_6_months')",
							"});",
							"",
							"// Проверить, что json response имеет параметр qa_salary_after_12_months",
							"pm.test('Проверить, что json response имеет параметр qa_salary_after_12_months', function () {",
							"    pm.expect(resp_json).to.have.property('qa_salary_after_12_months')",
							"});",
							"",
							"//  Проверить, что json response имеет параметр qa_salary_after_1.5_year",
							"pm.test(' Проверить, что json response имеет параметр qa_salary_after_1.5_year', function () {",
							"    pm.expect(resp_json).to.have.property('qa_salary_after_1.5_year')",
							"});",
							"",
							"// Проверить, что json response имеет параметр qa_salary_after_3.5_years",
							"pm.test('Проверить, что json response имеет параметр qa_salary_after_3.5_years', function () {",
							"    pm.expect(resp_json).to.have.property('qa_salary_after_3.5_years')",
							"});",
							"",
							"// Проверить, что json response имеет параметр person",
							"pm.test('Проверить, что json response имеет параметр person', function () {",
							"    pm.expect(resp_json).to.have.property('person')",
							"});",
							"",
							"// Проверить, что параметр start_qa_salary равен salary из request (salary забрать из request.)",
							"pm.test('Проверить, что параметр start_qa_salary равен salary из request (salary забрать из request.)', function () {",
							"    pm.expect(resp_json.start_qa_salary).to.eql(parseInt(req.salary))",
							"});",
							"",
							"// Проверить, что параметр qa_salary_after_6_months равен salary*2 из request (salary забрать из request.)",
							"pm.test('Проверить, что параметр qa_salary_after_6_months равен salary*2 из request (salary забрать из request.)', function () {",
							"    pm.expect(resp_json.qa_salary_after_6_months).to.eql(parseInt(req.salary*2))",
							"});",
							"",
							"// Проверить, что параметр qa_salary_after_12_months равен salary*2.7 из request (salary забрать из request.)",
							"pm.test('Проверить, что параметр qa_salary_after_12_months равен salary*2.7 из request (salary забрать из request.)', function () {",
							"    pm.expect(resp_json.qa_salary_after_12_months).to.eql(parseInt(req.salary*2.7))",
							"});",
							"",
							"// Проверить, что параметр qa_salary_after_1.5_year равен salary*3.3 из request (salary забрать из request.)",
							"let salary_1_5 = resp_json['qa_salary_after_1.5_year']",
							" pm.test('Проверить, что параметр qa_salary_after_1.5_year равен salary*3.3 из request (salary забрать из request.)', function () {",
							"    pm.expect(salary_1_5).to.eql(parseInt(req.salary*3.3))",
							"});",
							"",
							"// Проверить, что параметр qa_salary_after_3.5_years равен salary*3.8 из request (salary забрать из request.)",
							"let salary_3_5 = resp_json['qa_salary_after_3.5_years']",
							"pm.test('Проверить, что параметр qa_salary_after_3.5_years равен salary*3.8 из request (salary забрать из request.)', function () {",
							"pm.expect(salary_3_5).to.eql(parseInt(req.salary*3.8))",
							"});",
							"",
							"// Проверить, что в параметре person, 1-й элемент из u_name равен salary из request (salary забрать из request.)",
							"pm.test('Проверить, что в параметре person, 1-й элемент из u_name равен salary из request (salary забрать из request.)', function () {",
							"    pm.expect(resp_json.person.u_name[1]).to.eql(parseInt(req.salary))",
							"});",
							"",
							"// Проверить, что параметр u_age равен age из request (age забрать из request.)",
							"pm.test('Проверить, что что параметр u_age равен age из request (age забрать из request.)', function () {",
							"    pm.expect(resp_json.person.u_age).to.eql(parseInt(req.age))",
							"});",
							"",
							"// Проверить, что параметр u_salary_5_years равен salary*4.2 из request (salary забрать из request.)",
							"pm.test('Проверить, что параметр u_salary_5_years равен salary*4.2 из request (salary забрать из request.)', function () {",
							"    pm.expect(resp_json.person.u_salary_5_years).to.eql(parseInt(req.salary*4.2))",
							"});",
							"",
							"// ***Написать цикл который выведет в консоль по порядку элементы списка из параметра person.",
							"let per_let = resp_json.person",
							"for (let a in per_let) {",
							"    console.log (a + '=' + per_let[a]);",
							"};",
							"",
							"// let per_len = per_let.length;",
							"// for (let i = 0; i < per_len; i++) {",
							"    // console.log(person[i])",
							"    // };"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "name",
							"value": "{{name}}",
							"type": "text"
						},
						{
							"key": "age",
							"value": "{{age}}",
							"type": "text"
						},
						{
							"key": "salary",
							"value": "{{salary}}",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "{{url}}/user_info_2",
					"host": [
						"{{url}}"
					],
					"path": [
						"user_info_2"
					]
				}
			},
			"response": []
		},
		{
			"name": "user_info_3",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Статус код 200",
							"pm.test(\"Статус код 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"// Спарсить response body в json",
							"let schema = {",
							"    \"$schema\": \"http://json-schema.org/draft-06/schema#\",",
							"    \"$ref\": \"#/definitions/Welcome9\",",
							"    \"definitions\": {",
							"        \"Welcome9\": {",
							"            \"type\": \"object\",",
							"            \"additionalProperties\": false,",
							"            \"properties\": {",
							"                \"age\": {",
							"                    \"type\": \"string\"",
							"                },",
							"                \"family\": {",
							"                    \"$ref\": \"#/definitions/Family\"",
							"                },",
							"                \"name\": {",
							"                    \"type\": \"string\"",
							"                },",
							"                \"salary\": {",
							"                    \"type\": \"integer\"",
							"                }",
							"            },",
							"            \"required\": [",
							"                \"age\",",
							"                \"family\",",
							"                \"name\",",
							"                \"salary\"",
							"            ],",
							"            \"title\": \"Welcome9\"",
							"        },",
							"        \"Family\": {",
							"            \"type\": \"object\",",
							"            \"additionalProperties\": false,",
							"            \"properties\": {",
							"                \"children\": {",
							"                    \"type\": \"array\",",
							"                    \"items\": {",
							"                        \"type\": \"array\",",
							"                        \"items\": {",
							"                            \"$ref\": \"#/definitions/Child\"",
							"                        }",
							"                    }",
							"                },",
							"                \"u_salary_1_5_year\": {",
							"                    \"type\": \"integer\"",
							"                }",
							"            },",
							"            \"required\": [",
							"                \"children\",",
							"                \"u_salary_1_5_year\"",
							"            ],",
							"            \"title\": \"Family\"",
							"        },",
							"        \"Child\": {",
							"            \"anyOf\": [",
							"                {",
							"                    \"type\": \"integer\"",
							"                },",
							"                {",
							"                    \"type\": \"string\"",
							"                }",
							"            ],",
							"            \"title\": \"Child\"",
							"        }",
							"    }",
							"};",
							"",
							"let jsonResp = pm.response.json();",
							"",
							"pm.test('Спарсить response body в json', function () {",
							"    pm.expect(tv4.validate(jsonResp, schema)).to.be.true;",
							"    ",
							"});",
							"let resp_name = pm.response.json();",
							"let json_age = JSON.parse(responseBody);",
							"let resp_age = parseInt(json_age.age);",
							"// Проверить, что name в ответе равно name в request (name вбить руками)",
							"pm.test('Проверка имя в ответе = имя в запросе', function() {",
							"    ",
							"    pm.expect(resp_name.name).to.eql('Valya')",
							"});",
							"",
							"// Проверить, что age в ответе равно age в request (age вбить руками)",
							"pm.test('Проверка возраст в запросе = возраст в ответе', function() {",
							"    ",
							"    pm.expect(resp_age).to.eql(28)",
							"});",
							"// Проверить, что salary в ответе равно salary в request (salary вбить руками)",
							"",
							"let resp_salary = pm.response.json();",
							"pm.test(\"Моя зарплата\", function () {",
							"pm.expect(resp_salary.salary).to.eql(100);",
							"    });",
							"",
							"// Спарсить request",
							" let req = request.data",
							"",
							"// Проверить, что name в ответе = name в request (name забрать из request)",
							"pm.test(\"Проверить, что name в ответе = name в request (name забрать из request)\", function () {",
							"    pm.expect(resp_name.name).to.eql(req.name);",
							"});",
							"// Проверить, что age в ответе = age в request (age забрать из request)",
							"pm.test('Проверить, что age в ответе = age в request(age забрать из request)', function (){",
							"    pm.expect(json_age.age).to.eql(req.age)",
							"});",
							"// Проверить, что salary в ответе = salary в request (salary забрать из request)",
							"pm.test('Проверить, что salary в ответе = salary в request (salary забрать из request)', function () {",
							"    pm.expect(resp_salary.salary).to.eql(parseInt(req.salary))",
							"});",
							"",
							"// Вывести в консоль параметр family из response",
							"let resp_family = pm.response.json();",
							"let family = resp_family.family",
							"console.log('family = ', family);",
							"",
							"// Проверить что u_salary_1_5_year в ответе равно salary*4 (salary забрать из request)",
							"let salary_1_5 = pm.response.json();",
							"pm.test('Проверить что u_salary_1_5_year в ответе равно salary*4 (salary забрать из request)', function () {",
							"    pm.expect(salary_1_5.family.u_salary_1_5_year).to.eql(req.salary*4)",
							"});",
							"",
							"",
							"",
							"",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "name",
							"value": "Valya",
							"type": "text"
						},
						{
							"key": "age",
							"value": "{{age}}",
							"type": "text"
						},
						{
							"key": "salary",
							"value": "100",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "{{url}}/user_info_3",
					"host": [
						"{{url}}"
					],
					"path": [
						"user_info_3"
					]
				}
			},
			"response": []
		},
		{
			"name": "oblect_info",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var popa = pm.response.json();",
							"",
							"let mama = popa.age",
							"console.log('popa = ', popa)",
							"",
							"",
							"pm.test(\"Your daily\", function () {",
							"    ",
							"    pm.expect(mama).to.eql(28);",
							"});",
							"pm.test(\"Body matches string\", function () {",
							"     pm.expect(pm.response.text()).to.include(\"Andrey\");",
							"});",
							"pm.test('Body matches strings', function () {",
							"    pm.expect(pm.response.text()).to.include ('Andrey');",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": []
				},
				"url": {
					"raw": "{{url}}/object_info_1?name=Andrey&age=28&weight=77",
					"host": [
						"{{url}}"
					],
					"path": [
						"object_info_1"
					],
					"query": [
						{
							"key": "name",
							"value": "Andrey"
						},
						{
							"key": "age",
							"value": "28"
						},
						{
							"key": "weight",
							"value": "77"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "oblect_info_2",
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{url}}/object_info_2?name=Andrey&age=28&salary=230000",
					"host": [
						"{{url}}"
					],
					"path": [
						"object_info_2"
					],
					"query": [
						{
							"key": "name",
							"value": "Andrey"
						},
						{
							"key": "age",
							"value": "28"
						},
						{
							"key": "salary",
							"value": "230000"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "object_info_3",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Статус код 200",
							"pm.test(\"Статус код 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"//  Спарсить response body в json",
							"var schema = {",
							"    \"$schema\": \"http://json-schema.org/draft-06/schema#\",",
							"    \"$ref\": \"#/definitions/Welcome9\",",
							"    \"definitions\": {",
							"        \"Welcome9\": {",
							"            \"type\": \"object\",",
							"            \"additionalProperties\": false,",
							"            \"properties\": {",
							"                \"age\": {",
							"                    \"type\": \"string\",",
							"                    \"format\": \"integer\"",
							"                },",
							"                \"family\": {",
							"                    \"$ref\": \"#/definitions/Family\"",
							"                },",
							"                \"name\": {",
							"                    \"type\": \"string\"",
							"                },",
							"                \"salary\": {",
							"                    \"type\": \"integer\"",
							"                }",
							"            },",
							"            \"required\": [",
							"                \"age\",",
							"                \"family\",",
							"                \"name\",",
							"                \"salary\"",
							"            ],",
							"            \"title\": \"Welcome9\"",
							"        },",
							"        \"Family\": {",
							"            \"type\": \"object\",",
							"            \"additionalProperties\": false,",
							"            \"properties\": {",
							"                \"children\": {",
							"                    \"type\": \"array\",",
							"                    \"items\": {",
							"                        \"type\": \"array\",",
							"                        \"items\": {",
							"                            \"$ref\": \"#/definitions/Child\"",
							"                        }",
							"                    }",
							"                },",
							"                \"pets\": {",
							"                    \"$ref\": \"#/definitions/Pets\"",
							"                },",
							"                \"u_salary_1_5_year\": {",
							"                    \"type\": \"integer\"",
							"                }",
							"            },",
							"            \"required\": [",
							"                \"children\",",
							"                \"pets\",",
							"                \"u_salary_1_5_year\"",
							"            ],",
							"            \"title\": \"Family\"",
							"        },",
							"        \"Pets\": {",
							"            \"type\": \"object\",",
							"            \"additionalProperties\": false,",
							"            \"properties\": {",
							"                \"cat\": {",
							"                    \"$ref\": \"#/definitions/Cat\"",
							"                },",
							"                \"dog\": {",
							"                    \"$ref\": \"#/definitions/Cat\"",
							"                }",
							"            },",
							"            \"required\": [",
							"                \"cat\",",
							"                \"dog\"",
							"            ],",
							"            \"title\": \"Pets\"",
							"        },",
							"        \"Cat\": {",
							"            \"type\": \"object\",",
							"            \"additionalProperties\": false,",
							"            \"properties\": {",
							"                \"age\": {",
							"                    \"type\": \"integer\"",
							"                },",
							"                \"name\": {",
							"                    \"type\": \"string\"",
							"                }",
							"            },",
							"            \"required\": [",
							"                \"age\",",
							"                \"name\"",
							"            ],",
							"            \"title\": \"Cat\"",
							"        },",
							"        \"Child\": {",
							"            \"anyOf\": [",
							"                {",
							"                    \"type\": \"integer\"",
							"                },",
							"                {",
							"                    \"type\": \"string\"",
							"                }",
							"            ],",
							"            \"title\": \"Child\"",
							"        }",
							"    }",
							"}",
							"",
							"",
							" let json_resp = pm.response.json()",
							"",
							"",
							"pm.test('Спарсить response body в json', function () {",
							"pm.expect(tv4.validate(json_resp, schema)).to.be.true;",
							"   ",
							"});",
							"// Спарсить request.",
							"let req_data = pm.request.url.query.toObject();",
							"",
							"// Проверить, что name в ответе равно name s request (name забрать из request.)",
							"let resp_name = pm.response.json();",
							"let req = pm.request.url.query.toObject();",
							"let resp_age = pm.response.json();",
							"let resp_salary = pm.response.json()",
							"pm.test(\"Проверить, что name в ответе равно name s request (name забрать из request.)\", function () {",
							"        pm.expect(resp_name.name).to.eql(req.name);",
							"    });",
							"// Проверить, что age в ответе равно age s request (age забрать из request.)",
							"pm.test('Проверить, что age в ответе равно age s request (age забрать из request.)', function(){",
							"    pm.expect(resp_age.age).to.eql(req.age)",
							"});",
							"",
							"// Проверить, что salary в ответе равно salary s request (salary забрать из request.)",
							"pm.test('Проверить, что salary в ответе равно salary s request (salary забрать из request.)', function() {",
							"    pm.expect(resp_salary.salary).to.eql(parseInt(req.salary))",
							"});",
							"",
							"// Вывести в консоль параметр family из response.",
							"let resp_family = pm.response.json();",
							"let family = resp_family.family;",
							"console.log('family =', family)",
							"// Проверить, что у параметра dog есть параметры name.",
							"let resp_pets = pm.response.json()",
							"let pets_dog = resp_pets.family.pets.dog",
							"let pets_name = resp_pets.family.pets.dog.name",
							"pm.test(\"Проверить, что у параметра dog есть параметры name.\", function () {",
							"pm.expect(pets_dog).to.have.property('name')",
							"});",
							"",
							"// Проверить, что у параметра dog есть параметры age.",
							"pm.test('Проверить, что у параметра dog есть параметры age', function () {",
							"    pm.expect(pets_dog).to.have.property('age')",
							"});",
							"// Проверить, что параметр name имеет значение Luky.",
							"pm.test('Проверить, что параметр name имеет значение Luky.', function () {",
							"    pm.expect(pets_name).to.eql('Luky')",
							"});",
							"// Проверить, что параметр age имеет значение 4.",
							"pm.test('Проверить, что параметр age имеет значение 4.', function () {",
							"    pm.expect(pets_dog.age).to.eql(4)",
							"});",
							"",
							"",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{url}}/object_info_3?name=Andrey&age=28&salary=230000",
					"host": [
						"{{url}}"
					],
					"path": [
						"object_info_3"
					],
					"query": [
						{
							"key": "name",
							"value": "Andrey"
						},
						{
							"key": "age",
							"value": "28"
						},
						{
							"key": "salary",
							"value": "230000"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "object_info_4",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Статус код 200",
							"pm.test(\"Статус код 200\"), function () {",
							"    pm.response.to.have.status(200);",
							"};",
							"",
							"// Спарсить response body в json.",
							"var schema = {",
							"    \"$schema\": \"http://json-schema.org/draft-06/schema#\",",
							"    \"$ref\": \"#/definitions/Welcome9\",",
							"    \"definitions\": {",
							"        \"Welcome9\": {",
							"            \"type\": \"object\",",
							"            \"additionalProperties\": false,",
							"            \"properties\": {",
							"                \"age\": {",
							"                    \"type\": \"integer\"",
							"                },",
							"                \"name\": {",
							"                    \"type\": \"string\"",
							"                },",
							"                \"salary\": {",
							"                    \"type\": \"array\",",
							"                    \"items\": {",
							"                        \"$ref\": \"#/definitions/Salary\"",
							"                    }",
							"                }",
							"            },",
							"            \"required\": [",
							"                \"age\",",
							"                \"name\",",
							"                \"salary\"",
							"            ],",
							"            \"title\": \"Welcome9\"",
							"        },",
							"        \"Salary\": {",
							"            \"anyOf\": [",
							"                {",
							"                    \"type\": \"integer\"",
							"                },",
							"                {",
							"                    \"type\": \"string\",",
							"                    \"format\": \"integer\"",
							"                }",
							"            ],",
							"            \"title\": \"Salary\"",
							"        }",
							"    }",
							"}",
							"",
							"let resp_json = pm.response.json()",
							"",
							"pm.test('Спарсить response body в json.', function () {",
							"    pm.expect(tv4.validate(resp_json, schema)).to.be.true;",
							"});",
							"// Спарсить request.",
							"let req = pm.request.url.query.toObject();",
							"",
							"// Проверить, что name в ответе равно name s request (name забрать из request.)",
							"pm.test('Проверить, что name в ответе равно name s request (name забрать из request.)', function () {",
							"let res_name = pm.response.json()",
							"pm.expect(res_name.name).to.eql(req.name)",
							"});",
							"",
							"// Проверить, что age в ответе равно age s request (age забрать из request.)",
							"let res_age = pm.response.json()",
							"pm.test('Проверить, что age в ответе равно age s request (age забрать из request.)', function() {",
							"    pm.expect(res_age.age).to.eql(parseInt(req.age))",
							"    });",
							"",
							"// Вывести в консоль параметр salary из request.",
							"let salary_1 = req.salary",
							"console.log('salary_1 =', salary_1)",
							"",
							"// Вывести в консоль параметр salary из response.",
							"let resp_salary = pm.response.json()",
							"let salary = resp_salary.salary",
							"console.log('salary =', salary)",
							"",
							"// Вывести в консоль 0-й элемент параметра salary из response.",
							"console.log('salary =', salary[0])",
							"",
							"// Вывести в консоль 1-й элемент параметра salary параметр salary из response.",
							"console.log('salary =', salary[1])",
							"",
							"// Вывести в консоль 2-й элемент параметра salary параметр salary из response.",
							"console.log('salary =', salary[2])",
							"",
							"// Проверить, что 0-й элемент параметра salary равен salary из request (salary забрать из request.)",
							"pm.test('Проверить, что 0-й элемент параметра salary равен salary из request (salary забрать из request.)', function () {",
							"    pm.expect(salary[0]).to.eql(parseInt(req.salary))",
							"});",
							"// Проверить, что 1-й элемент параметра salary равен salary*2 из request (salary забрать из request.)",
							"pm.test('Проверить, что 1-й элемент параметра salary равен salary*2 из request (salary забрать из request.)', function () {",
							"    pm.expect(parseInt(salary[1])).to.eql(req.salary*2)",
							"});",
							"// Проверить, что 2-й элемент параметра salary равен salary*3 из request (salary забрать из request.)",
							"pm.test('Проверить, что 2-й элемент параметра salary равен salary*3 из request (salary забрать из request.)', function () {",
							"    pm.expect(parseInt(salary[2])).to.eql(req.salary*3)",
							"});",
							"// Передать в окружение переменную name",
							"let a = pm.response.json()",
							"pm.environment.set(\"name\",a.name);",
							"",
							"// Передать в окружение переменную age",
							"pm.environment.set('age',a.age);",
							"",
							"// Передать в окружение переменную salary",
							"pm.environment.set('salary',a.salary[0]);",
							"",
							"// Написать цикл который выведет в консоль по порядку элементы списка из параметра salary.",
							"",
							"let salary_length = salary.length;",
							"for (let i = 0; i < salary_length; i++) {",
							"    console.log(salary[i])",
							"    };",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{url}}/object_info_4?name=Andrey&age=28&salary=230000",
					"host": [
						"{{url}}"
					],
					"path": [
						"object_info_4"
					],
					"query": [
						{
							"key": "name",
							"value": "Andrey"
						},
						{
							"key": "age",
							"value": "28"
						},
						{
							"key": "salary",
							"value": "230000"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "login",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"",
							"",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "login",
							"value": "Andrey",
							"type": "text"
						},
						{
							"key": "password",
							"value": "28",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "{{url}}/login",
					"host": [
						"{{url}}"
					],
					"path": [
						"login"
					]
				}
			},
			"response": []
		},
		{
			"name": "new_data",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Статус код 200",
							"pm.test(\"Статус код 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"// Проверка структуры json в ответе.",
							"var schema = {",
							"    \"$schema\": \"http://json-schema.org/draft-06/schema#\",",
							"    \"$ref\": \"#/definitions/Welcome2\",",
							"    \"definitions\": {",
							"        \"Welcome2\": {",
							"            \"type\": \"object\",",
							"            \"additionalProperties\": false,",
							"            \"properties\": {",
							"                \"age\": {",
							"                    \"type\": \"integer\"",
							"                },",
							"                \"name\": {",
							"                    \"type\": \"string\"",
							"                },",
							"                \"salary\": {",
							"                    \"type\": \"array\",",
							"                    \"items\": {",
							"                        \"$ref\": \"#/definitions/Salary\"",
							"                    }",
							"                }",
							"            },",
							"            \"required\": [",
							"                \"age\",",
							"                \"name\",",
							"                \"salary\"",
							"            ],",
							"            \"title\": \"Welcome2\"",
							"        },",
							"        \"Salary\": {",
							"            \"anyOf\": [",
							"                {",
							"                    \"type\": \"integer\"",
							"                },",
							"                {",
							"                    \"type\": \"string\",",
							"                    \"format\": \"integer\"",
							"                }",
							"            ],",
							"            \"title\": \"Salary\"",
							"        }",
							"    }",
							"}",
							"let resp_json = pm.response.json()",
							"",
							"",
							"pm.test('Проверка структуры json в ответе.', function () {",
							"    pm.expect(tv4.validate(resp_json, schema)).to.be.true;",
							"});",
							"// В ответе указаны коэффициенты умножения salary, напишите тесты по проверке правильности результата перемножения на коэффициент.",
							"",
							"let salary = +resp_json.salary[0]",
							"let salary_1 = +resp_json.salary[1];",
							"let salary_2 = +resp_json.salary[2]",
							"pm.test('В ответе указаны коэффициенты умножения salary, напишите тесты по проверке правильности результата перемножения на коэффициент.', function () {",
							"    pm.expect(salary).to.eql(salary)",
							"    pm.expect(salary_1).to.eql(salary*2)",
							"    pm.expect(salary_2).to.eql(salary*3)",
							"});",
							"",
							"// Проверить, что 2-й элемент массива salary больше 1-го и 0-го",
							"pm.test('Проверить, что 2-й элемент массива salary больше 1-го и 0-го', function () {",
							"    pm.expect(salary_2).to.be.greaterThan(salary)",
							"    pm.expect(salary_2).to.be.greaterThan(salary_1)",
							"});",
							"",
							"",
							"",
							"// ",
							"",
							"",
							"",
							"",
							"",
							"",
							"",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "age",
							"value": "28",
							"type": "text"
						},
						{
							"key": "salary",
							"value": "230000",
							"type": "text"
						},
						{
							"key": "name",
							"value": "Andrey",
							"type": "text"
						},
						{
							"key": "auth_token",
							"value": "{{token}}",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "{{url}}/new_data",
					"host": [
						"{{url}}"
					],
					"path": [
						"new_data"
					]
				}
			},
			"response": []
		},
		{
			"name": "user_info",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Статус код 200",
							"pm.test(\"Статус код 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"// Проверка структуры json в ответе.",
							"var schema = {",
							"    \"$schema\": \"http://json-schema.org/draft-06/schema#\",",
							"    \"$ref\": \"#/definitions/Welcome6\",",
							"    \"definitions\": {",
							"        \"Welcome6\": {",
							"            \"type\": \"object\",",
							"            \"additionalProperties\": false,",
							"            \"properties\": {",
							"                \"person\": {",
							"                    \"$ref\": \"#/definitions/Person\"",
							"                },",
							"                \"qa_salary_after_12_months\": {",
							"                    \"type\": \"number\"",
							"                },",
							"                \"qa_salary_after_6_months\": {",
							"                    \"type\": \"integer\"",
							"                },",
							"                \"start_qa_salary\": {",
							"                    \"type\": \"integer\"",
							"                }",
							"            },",
							"            \"required\": [",
							"                \"person\",",
							"                \"qa_salary_after_12_months\",",
							"                \"qa_salary_after_6_months\",",
							"                \"start_qa_salary\"",
							"            ],",
							"            \"title\": \"Welcome6\"",
							"        },",
							"        \"Person\": {",
							"            \"type\": \"object\",",
							"            \"additionalProperties\": false,",
							"            \"properties\": {",
							"                \"u_age\": {",
							"                    \"type\": \"integer\"",
							"                },",
							"                \"u_name\": {",
							"                    \"type\": \"array\",",
							"                    \"items\": {",
							"                        \"$ref\": \"#/definitions/UName\"",
							"                    }",
							"                },",
							"                \"u_salary_1_5_year\": {",
							"                    \"type\": \"integer\"",
							"                }",
							"            },",
							"            \"required\": [",
							"                \"u_age\",",
							"                \"u_name\",",
							"                \"u_salary_1_5_year\"",
							"            ],",
							"            \"title\": \"Person\"",
							"        },",
							"        \"UName\": {",
							"            \"anyOf\": [",
							"                {",
							"                    \"type\": \"integer\"",
							"                },",
							"                {",
							"                    \"type\": \"string\"",
							"                }",
							"            ],",
							"            \"title\": \"UName\"",
							"        }",
							"    }",
							"}",
							"let resp_json = pm.response.json()",
							"pm.test('Проверка структуры json в ответе', function () {",
							"    pm.expect(tv4.validate(resp_json, schema)).to.be.true;",
							"});",
							"",
							"// В ответе указаны коэффициенты умножения salary, напишите тесты по проверке правильности результата перемножения на коэффициент.",
							"let salary_1_5 = resp_json.person.u_salary_1_5_year",
							"let salary_12  = resp_json.qa_salary_after_12_months",
							"let salary_6 = resp_json.qa_salary_after_6_months",
							"let salary = resp_json.start_qa_salary",
							"pm.test('В ответе указаны коэффициенты умножения salary, напишите тесты по проверке правильности результата перемножения на коэффициент.', function () {",
							"    pm.expect(salary_1_5).to.eql(salary*4)",
							"    pm.expect(salary_12).to.eql(salary*2.9)",
							"    pm.expect(salary_6).to.eql(salary*2)",
							"});",
							"",
							"// Достать значение из поля 'u_salary_1.5_year' и передать в поле salary запроса http://162.55.220.72:5005/get_test_user",
							"pm.environment.set('u_salary_1_5_year', 'resp_json.person.u_salary_1_5_year');",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"age\": 28,\n    \"salary\": 230000,\n    \"name\": \"Andrey\",\n    \"auth_token\": \"{{token}}\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{url}}/user_info",
					"host": [
						"{{url}}"
					],
					"path": [
						"user_info"
					]
				}
			},
			"response": []
		},
		{
			"name": "currency",
			"request": {
				"method": "GET",
				"header": []
			},
			"response": []
		},
		{
			"name": "first",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Статус код 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"pm.test(\"Проверить, что в body приходит правильный string\", function () {",
							"    pm.expect(pm.response.text()).to.include(\"This is the first responce from server!\");",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{url}}/first",
					"host": [
						"{{url}}"
					],
					"path": [
						"first"
					]
				}
			},
			"response": []
		},
		{
			"name": "get_test_user",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Статус код 200",
							"pm.test(\"Статус код 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"// Проверка структуры json в ответе.",
							"var schema = {",
							"    \"$schema\": \"http://json-schema.org/draft-06/schema#\",",
							"    \"$ref\": \"#/definitions/Welcome9\",",
							"    \"definitions\": {",
							"        \"Welcome9\": {",
							"            \"type\": \"object\",",
							"            \"additionalProperties\": false,",
							"            \"properties\": {",
							"                \"age\": {",
							"                    \"type\": \"string\",",
							"                    \"format\": \"integer\"",
							"                },",
							"                \"family\": {",
							"                    \"$ref\": \"#/definitions/Family\"",
							"                },",
							"                \"name\": {",
							"                    \"type\": \"string\"",
							"                },",
							"                \"salary\": {",
							"                    \"type\": \"integer\"",
							"                }",
							"            },",
							"            \"required\": [",
							"                \"age\",",
							"                \"family\",",
							"                \"name\",",
							"                \"salary\"",
							"            ],",
							"            \"title\": \"Welcome9\"",
							"        },",
							"        \"Family\": {",
							"            \"type\": \"object\",",
							"            \"additionalProperties\": false,",
							"            \"properties\": {",
							"                \"children\": {",
							"                    \"type\": \"array\",",
							"                    \"items\": {",
							"                        \"type\": \"array\",",
							"                        \"items\": {",
							"                            \"$ref\": \"#/definitions/Child\"",
							"                        }",
							"                    }",
							"                },",
							"                \"u_salary_1_5_year\": {",
							"                    \"type\": \"integer\"",
							"                }",
							"            },",
							"            \"required\": [",
							"                \"children\",",
							"                \"u_salary_1_5_year\"",
							"            ],",
							"            \"title\": \"Family\"",
							"        },",
							"        \"Child\": {",
							"            \"anyOf\": [",
							"                {",
							"                    \"type\": \"integer\"",
							"                },",
							"                {",
							"                    \"type\": \"string\"",
							"                }",
							"            ],",
							"            \"title\": \"Child\"",
							"        }",
							"    }",
							"}",
							"",
							"let resp_json = pm.response.json()",
							"",
							"pm.test('Проверка структуры json в ответе.', function () {",
							"    pm.expect(tv4.validate(resp_json, schema)).to.be.true;",
							"",
							"});",
							"",
							"// Проверить что значение поля name = значению переменной name из окружения",
							"let env = request.data",
							"pm.test('Проверить что значение поля name = значению переменной name из окружения', function () {",
							"    pm.expect(resp_json.name).to.be.eql(env.name)",
							"});",
							"",
							"// Проверить что значение поля age в ответе соответсвует отправленному в запросе значению поля age",
							"pm.test('Проверить что значение поля age в ответе соответсвует отправленному в запросе значению поля age', function () {",
							"    pm.expect(resp_json.age).to.eql(env.age)",
							"});",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "age",
							"value": "28",
							"type": "text"
						},
						{
							"key": "salary",
							"value": "230000",
							"type": "text"
						},
						{
							"key": "name",
							"value": "Andrey",
							"type": "text"
						},
						{
							"key": "auth_token",
							"value": "{{token}}",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "{{url}}/get_test_user",
					"host": [
						"{{url}}"
					],
					"path": [
						"get_test_user"
					]
				}
			},
			"response": []
		},
		{
			"name": "test_pet_info",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Статус код 200 ",
							"pm.test(\"Статус код 200 \", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"// Проверка структуры json в ответе.",
							"var schema = {",
							"    \"$schema\": \"http://json-schema.org/draft-06/schema#\",",
							"    \"$ref\": \"#/definitions/Welcome1\",",
							"    \"definitions\": {",
							"        \"Welcome1\": {",
							"            \"type\": \"object\",",
							"            \"additionalProperties\": false,",
							"            \"properties\": {",
							"                \"age\": {",
							"                    \"type\": \"integer\"",
							"                },",
							"                \"daily_food\": {",
							"                    \"type\": \"number\"",
							"                },",
							"                \"daily_sleep\": {",
							"                    \"type\": \"number\"",
							"                },",
							"                \"name\": {",
							"                    \"type\": \"string\"",
							"                }",
							"            },",
							"            \"required\": [",
							"                \"age\",",
							"                \"daily_food\",",
							"                \"daily_sleep\",",
							"                \"name\"",
							"            ],",
							"            \"title\": \"Welcome1\"",
							"        }",
							"    }",
							"}",
							"",
							"let resp_json = pm.response.json()",
							"",
							"pm.test('Проверка структуры json в ответе.', function () {",
							"    pm.expect(tv4.validate(resp_json, schema)).to.be.true;",
							"});",
							"",
							"// В ответе указаны коэффициенты умножения weight, напишите тесты по проверке правильности результата перемножения на коэффициент.",
							"",
							"pm.test('В ответе указаны коэффициенты умножения weight, напишите тесты по проверке правильности результата перемножения на коэффициент.', function () {",
							"    pm.expect(resp_json.daily_food).to.eql(77*0.012)",
							"    pm.expect(resp_json.daily_sleep).to.eql(77*2.5)",
							"});",
							"pm.test('В ответе указаны коэффициенты умножения weight, напишите тесты по проверке правильности результата перемножения на коэффициент.', function () {",
							"let wei = request.data.weight",
							"pm.expect(resp_json.daily_food).to.eql(wei*0.012)",
							"pm.expect(resp_json.daily_sleep).to.eql(wei*2.5)",
							"});",
							"",
							"",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "age",
							"value": "28",
							"type": "text"
						},
						{
							"key": "weight",
							"value": "77",
							"type": "text"
						},
						{
							"key": "name",
							"value": "Andrey",
							"type": "text"
						},
						{
							"key": "auth_token",
							"value": "{{token}}",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "{{url}}/test_pet_info",
					"host": [
						"{{url}}"
					],
					"path": [
						"test_pet_info"
					]
				}
			},
			"response": []
		}
	]
}